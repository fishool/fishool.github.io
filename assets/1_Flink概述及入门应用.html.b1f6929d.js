import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,d as t}from"./app.5f15ca94.js";const p={},e=t(`<h1 id="flink概述及入门应用" tabindex="-1"><a class="header-anchor" href="#flink概述及入门应用" aria-hidden="true">#</a> Flink概述及入门应用</h1><h2 id="第一部分-flink-概述" tabindex="-1"><a class="header-anchor" href="#第一部分-flink-概述" aria-hidden="true">#</a> 第一部分 Flink 概述</h2><h3 id="第-1-节-什么是-flink" tabindex="-1"><a class="header-anchor" href="#第-1-节-什么是-flink" aria-hidden="true">#</a> 第 1 节 什么是 Flink</h3><p>Apache Flink是一个框架和分布式处理引擎，用于对无界和有界数据流进行有状态计算。Flink被设计在所有常见的集群环境中运行，以内存执行速度和任意规模来执行计算。</p><ul><li><p>Flink起源于2008年柏林理工大学的研究性项目Stratosphere</p></li><li><p>2014年该项目被捐赠给了Apache软件基金会</p></li><li><p>Flink一跃成为Apache软件基金会的顶级项目之一</p><p><strong>Flink的Logo</strong></p><p><img src="https://81.71.83.25/bucket/image-20200721101056715.png" alt="" loading="lazy"></p><p><strong>Apache的Logo</strong></p><p><img src="https://81.71.83.25/bucket/image-20200721101208586.png" alt="" loading="lazy"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>在德语中，Flink一词表示快速和灵巧，项目采用一只松鼠的彩色图案作为logo，这不仅是因为松鼠具有快速和灵巧的特点，还因为柏林的松鼠有一种迷人的红棕色，而Flink的松鼠logo拥有可爱的尾巴，尾巴的颜色与Apache软件基金会的logo颜色相呼应，也就是说，这是一只Apache风格的松鼠。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="第-2-节-flink-特点" tabindex="-1"><a class="header-anchor" href="#第-2-节-flink-特点" aria-hidden="true">#</a> 第 2 节 Flink 特点</h3><p>Flink 是一个开源的流处理框架，它具有以下特点</p><ul><li><p>批流一体：统一批处理、流处理</p></li><li><p>分布式：Flink程序可以运行在多台机器上</p></li><li><p>高性能：处理性能比较高</p></li><li><p>高可用：Flink支持高可用性（HA）</p></li><li><p>准确：Flink可以保证数据处理的准确性</p></li></ul><h3 id="第-2-节-flink-应用场景" tabindex="-1"><a class="header-anchor" href="#第-2-节-flink-应用场景" aria-hidden="true">#</a> 第 2 节 Flink 应用场景</h3><p>​ <strong>Flink主要应用于流式数据分析场景</strong></p><ul><li><p>实时ETL</p><p>集成流计算现有的诸多数据通道和SQL灵活的加工能力，对流式数据进行实时清晰、归并和结构化处理；同时，对离线数仓进行有效的补充和优化，并为数据实时传输提供可计算通道。</p></li><li><p>实时报表</p><p>实时化采集、加工流式数据存储；实时监控和展现业务、客户各类指标，让数据化运营实时化。</p></li><li><p>监控预警</p><p>对系统和用户行为进行实时监测和分析，以便及时发现危险行为</p></li><li><p>在线系统</p><p>实时计算各类数据指标，并利用实时结果及时调整在线系统的相关策略，在各类内容投放、智能推送领域有大量的应用</p></li></ul><h3 id="第-4-节-flink-核心组成及生态发展" tabindex="-1"><a class="header-anchor" href="#第-4-节-flink-核心组成及生态发展" aria-hidden="true">#</a> 第 4 节 Flink 核心组成及生态发展</h3><p><strong>Flink核心组成</strong></p><p><img src="https://81.71.83.25/bucket/image-20200722171959131.png" alt="" loading="lazy"></p><ul><li>Deploy层： <ul><li>可以启动单个JVM，让Flink以Local模式运行</li><li>Flink也可以以Standalone 集群模式运行，同时也支持Flink ON YARN，Flink应用直接提交到YARN上面运行</li><li>Flink还可以运行在GCE（谷歌云服务）和EC2（亚马逊云服务）</li></ul></li><li>Core层（Runtime）：在Runtime之上提供了两套核心的API，DataStream API（流处理）和DataSet API（批处理）</li><li>APIs &amp; Libraries层：核心API之上又扩展了一些高阶的库和API <ul><li>CEP流处理</li><li>Table API和SQL</li><li>Flink ML机器学习库</li><li>Gelly图计算</li></ul></li></ul><p><strong>Flink生态发展</strong></p><p><img src="https://81.71.83.25/bucket/image-20200722171657610.png" alt="" loading="lazy"></p><ul><li><p><strong>中间部分主要内容在上面Flink核心组成中已经提到</strong></p></li><li><p><strong>输入Connectors（左侧部分）</strong></p><p>流处理方式：包含Kafka（消息队列）、AWS kinesis（实时数据流服务）、RabbitMQ（消息队列）、NIFI（数据管道）、Twitter（API）</p><p>批处理方式：包含HDFS（分布式文件系统）、HBase（分布式列式数据库）、Amazon S3（文件系统）、MapR FS（文件系统）、ALLuxio（基于内存分布式文件系统）</p></li><li><p><strong>输出Connectors（右侧部分）</strong></p><p>流处理方式：包含Kafka（消息队列）、AWS kinesis（实时数据流服务）、RabbitMQ（消息队列）、NIFI（数据管道）、Cassandra（NOSQL数据库）、ElasticSearch（全文检索）、HDFS rolling file（滚动文件）</p><p>批处理方式：包含HBase（分布式列式数据库）、HDFS（分布式文件系统）</p></li></ul><h3 id="第-5-节-flink-处理模型-流处理与批处理" tabindex="-1"><a class="header-anchor" href="#第-5-节-flink-处理模型-流处理与批处理" aria-hidden="true">#</a> 第 5 节 Flink 处理模型：流处理与批处理</h3><p>​ Flink 专注于无限流处理，有限流处理是无限流处理的一种特殊情况</p><p><strong>无限流处理：</strong></p><ul><li>输入的数据没有尽头，像水流一样源源不断</li><li>数据处理从当前或者过去的某一个时间 点开始，持续不停地进行</li></ul><p><strong>有限流处理：</strong></p><ul><li><p>从某一个时间点开始处理数据，然后在另一个时间点结束</p></li><li><p>输入数据可能本身是有限的（即输入数据集并不会随着时间增长），也可能出于分析的目的被人为地设定为有限集（即只分析某一个时间段内的事件）</p><p>Flink封装了DataStream API进行流处理，封装了DataSet API进行批处理。</p><p>同时，Flink也是一个批流一体的处理引擎，提供了Table API / SQL统一了批处理和流处理</p></li></ul><h3 id="第-6-节-流处理引擎的技术选型" tabindex="-1"><a class="header-anchor" href="#第-6-节-流处理引擎的技术选型" aria-hidden="true">#</a> 第 6 节 流处理引擎的技术选型</h3><p>​ 市面上的流处理引擎不止Flink一种，其他的比如Storm、SparkStreaming、Trident等，实际应用时如何进行选型，给大家一些建议参考</p><ul><li>流数据要进行状态管理，选择使用Trident、Spark Streaming或者Flink</li><li>消息投递需要保证At-least-once（至少一次）或者Exactly-once（仅一次）不能选择Storm</li><li>对于小型独立项目，有低延迟要求，可以选择使用Storm，更简单</li><li>如果项目已经引入了大框架Spark，实时处理需求可以满足的话，建议直接使用Spark中的Spark Streaming</li><li>消息投递要满足Exactly-once（仅一次），数据量大、有高吞吐、低延迟要求，要进行状态管理或窗口统计，建议使用Flink</li></ul><h2 id="第二部分-flink快速应用" tabindex="-1"><a class="header-anchor" href="#第二部分-flink快速应用" aria-hidden="true">#</a> 第二部分 Flink快速应用</h2><p>​ 通过一个单词统计的案例，快速上手应用Flink，进行流处理（Streaming）和批处理（Batch）</p><h3 id="第-1-节-单词统计案例-批数据" tabindex="-1"><a class="header-anchor" href="#第-1-节-单词统计案例-批数据" aria-hidden="true">#</a> 第 1 节 单词统计案例（批数据）</h3><h4 id="_1-1-需求" tabindex="-1"><a class="header-anchor" href="#_1-1-需求" aria-hidden="true">#</a> 1.1 需求</h4><p>​ 统计一个文件中各个单词出现的次数，把统计结果输出到文件</p><h4 id="_1-2-代码实现" tabindex="-1"><a class="header-anchor" href="#_1-2-代码实现" aria-hidden="true">#</a> 1.2 代码实现</h4><ul><li><p>引入依赖</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
&lt;!--flink核心包--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
    &lt;artifactId&gt;flink-java&lt;/artifactId&gt;
    &lt;version&gt;1.7.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;!--flink流处理包--&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;
    &lt;artifactId&gt;flink-streaming-java_2.12&lt;/artifactId&gt;
    &lt;version&gt;1.7.2&lt;/version&gt;
    &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Java程序</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>batch</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">FlatMapFunction</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">DataSet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">ExecutionEnvironment</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span></span><span class="token class-name">Tuple2</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collector</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 单词统计（批数据处理）
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCount</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 输入路径和出入路径通过参数传入，约定第一个参数为输入路径，第二个参数为输出路径</span>
        <span class="token class-name">String</span> inPath <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> outPath <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取Flink批处理执行环境</span>
        <span class="token class-name">ExecutionEnvironment</span> executionEnvironment <span class="token operator">=</span> <span class="token class-name">ExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取文件中内容</span>
        <span class="token class-name">DataSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> text <span class="token operator">=</span> executionEnvironment<span class="token punctuation">.</span><span class="token function">readTextFile</span><span class="token punctuation">(</span>inPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 对数据进行处理</span>
        <span class="token class-name">DataSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> dataSet <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LineSplitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSet<span class="token punctuation">.</span><span class="token function">writeAsCsv</span><span class="token punctuation">(</span>outputFile<span class="token punctuation">,</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 触发执行程序</span>
        executionEnvironment<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&quot;wordcount batch process&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LineSplitter</span> <span class="token keyword">implements</span> <span class="token class-name">FlatMapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> collector<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token operator">:</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                collector<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;properties&gt;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;    &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;    &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;&lt;/properties&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="第-2-节-单词统计案例-流数据" tabindex="-1"><a class="header-anchor" href="#第-2-节-单词统计案例-流数据" aria-hidden="true">#</a> 第 2 节 单词统计案例（流数据）</h3><p>nc</p><p>netcat:</p><h4 id="_2-1-需求" tabindex="-1"><a class="header-anchor" href="#_2-1-需求" aria-hidden="true">#</a> 2.1 需求</h4><p>​ Socket模拟实时发送单词，使用Flink实时接收数据，对指定时间窗口内（如5s）的数据进行聚合统计，每隔1s汇总计算一次，并且把时间窗口内计算结果打印出来。</p><h4 id="_2-2-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-2-代码实现" aria-hidden="true">#</a> 2.2 代码实现</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lagou<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>stream</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">FlatMapFunction</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span></span><span class="token class-name">Tuple2</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">SingleOutputStreamOperator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Time</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collector</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 	Socket模拟实时发送单词，使用Flink实时接收数据，对指定时间窗口内（如5s）的数据进行聚合统计，每隔1s汇总计算一次，并且把时间窗口内计算结果打印出来。
 teacher2 ip : 113.31.105.128
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCount</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 监听的ip和端口号，以main参数形式传入，约定第一个参数为ip，第二个参数为端口</span>
        <span class="token class-name">String</span> ip <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取Flink流执行环境</span>
        <span class="token class-name">StreamExecutionEnvironment</span> streamExecutionEnvironment <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取socket输入数据</span>
        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> textStream <span class="token operator">=</span> streamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tuple2SingleOutputStreamOperator <span class="token operator">=</span> textStream<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> collector<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> splits <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word <span class="token operator">:</span> splits<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    collector<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Tuple2</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1l</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> word <span class="token operator">=</span> tuple2SingleOutputStreamOperator<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token string">&quot;word&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 打印数据</span>
        word<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 触发任务执行</span>
        streamExecutionEnvironment<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&quot;wordcount stream process&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ Flink程序开发的流程总结如下：</p><p>1）获得一个执行环境</p><p>2）加载/创建初始化数据</p><p>3）指定数据操作的算子</p><p>4）指定结果数据存放位置</p><p>5）调用execute()触发执行程序</p><p><strong>注意：Flink程序是延迟计算的，只有最后调用execute()方法的时候才会真正触发执行程序</strong></p><h2 id="第三部分-flink体系结构" tabindex="-1"><a class="header-anchor" href="#第三部分-flink体系结构" aria-hidden="true">#</a> 第三部分 Flink体系结构</h2><h3 id="第-1-节-flink的重要角色" tabindex="-1"><a class="header-anchor" href="#第-1-节-flink的重要角色" aria-hidden="true">#</a> 第 1 节 Flink的重要角色</h3><p><img src="https://81.71.83.25/bucket/image-20200731000902936.png" alt="" loading="lazy"></p><p>​ Flink是非常经典的Master/Slave结构实现，JobManager是Master，TaskManager是Slave。</p><ul><li><p>JobManager处理器（Master）</p><ul><li>协调分布式执行，它们用来调度task，协调检查点(CheckPoint)，协调失败时恢复等</li></ul><p>task：任务。同一个阶段的多个SubTask的集合</p><p>SubTask：</p><p>电商：</p><ul><li>Flink运行时至少存在一个master处理器，如果配置高可用模式则会存在多个master处理器，它们其中有一个是leader，而其他的都是standby。</li></ul></li><li><p>TaskManager处理器（Slave）</p><p>​ 也称之为Worker</p><ul><li>主要职责是从JobManager处接收任务, 并部署和启动任务, 接收上游的数据并处理</li><li>Task Manager 是在 JVM 中的一个或多个线程中执行任务的工作节点</li></ul></li></ul><h3 id="第-2-节-flink运行架构" tabindex="-1"><a class="header-anchor" href="#第-2-节-flink运行架构" aria-hidden="true">#</a> 第 2 节 Flink运行架构</h3><h4 id="_2-1-flink程序结构" tabindex="-1"><a class="header-anchor" href="#_2-1-flink程序结构" aria-hidden="true">#</a> 2.1 Flink程序结构</h4><p>​ Flink程序的基本构建块是<strong>流</strong>和<strong>转换</strong>（请注意，Flink的DataSet API中使用的DataSet也是内部流 ）。从概念上讲，流是（可能永无止境的）数据记录流，而转换是将一个或多个流输入，并产生一个或多个输出流。</p><p><img src="https://81.71.83.25/bucket/image-20200731001906709.png" alt="" loading="lazy"></p><p>​ 上图表述了Flink的应用程序结构，有Source（源头）、Transformation（转换）、Sink（接收器）三个重要组成部分</p><ul><li><p>Source</p><p>​ 数据源，定义Flink从哪里加载数据，Flink 在流处理和批处理上的 source 大概有 4 类：基于本地集合的 source、基于文件的 source、基于网络套接字的 source、自定义的 source。自定义的 source 常见的有 Apache kafka、RabbitMQ 等。</p></li><li><p>Transformation</p><p>​ 数据转换的各种操作，也称之为算子，有 Map / FlatMap / Filter / KeyBy / Reduce / Window等，可以将数据转换计算成你想要的数据。</p></li><li><p>Sink</p><p>​ 接收器，Flink 将转换计算后的数据发送的地点 ，定义了结果数据的输出方向，Flink 常见的 Sink 大概有如下几类：写入文件、打印出来、写入 socket 、自定义的 sink 。自定义的 sink 常见的有 Apache kafka、RabbitMQ、MySQL、ElasticSearch、Apache Cassandra、HDFS等。</p></li></ul><h4 id="_2-2-task和subtask" tabindex="-1"><a class="header-anchor" href="#_2-2-task和subtask" aria-hidden="true">#</a> 2.2 Task和SubTask</h4><ul><li><p>Task 是一个阶段多个功能相同 SubTask 的集合，类似于 Spark 中的 TaskSet。</p></li><li><p>SubTask（子任务）</p><p>​ SubTask 是 Flink 中任务最小执行单元，是一个 Java 类的实例，这个 Java 类中有属性和方法，完成具体的计算逻辑</p><p>​ 比如一个执行操作map，分布式的场景下会在多个线程中同时执行，每个线程中执行的都叫做一个SubTask（在2.3节的图中也能够体现）</p></li></ul><h4 id="_2-3-operator-chain-操作器链" tabindex="-1"><a class="header-anchor" href="#_2-3-operator-chain-操作器链" aria-hidden="true">#</a> 2.3 Operator chain(操作器链)</h4><p>​ Flink的所有操作都称之为Operator，客户端在提交任务的时候会对Operator进行优化操作，能进行合并的Operator会被合并为一个Operator，合并后的Operator称为Operator chain，实际上就是一个执行链，每个执行链会在TaskManager上一个独立的线程中执行。shuffle</p><p><img src="https://81.71.83.25/bucket/image-20200731002729966.png" alt="" loading="lazy"></p><h4 id="_2-5-任务槽和槽共享" tabindex="-1"><a class="header-anchor" href="#_2-5-任务槽和槽共享" aria-hidden="true">#</a> 2.5 任务槽和槽共享</h4><p>​ 任务槽也叫做task-slot、槽共享也叫做slot sharing</p><p><img src="https://81.71.83.25/bucket/image-20200731003728504.png" alt="" loading="lazy"></p><p>· 每个TaskManager是一个JVM的进程, 可以在不同的线程中执行一个或多个子任务。</p><p>​ 为了控制一个worker能接收多少个task。worker通过task slot来进行控制（一个worker至少有一个task slot）</p><ul><li><p>任务槽</p><p>​ 每个task slot表示TaskManager拥有资源的一个固定大小的子集。 一般来说:我们分配槽的个数都是和CPU的核数相等,比如6核,那么就分配6个槽.</p><p>​ Flink将进程的内存进行了划分到多个Slot中。假设一个TaskManager机器有3个slot，那么每个slot占有1/3的内存（平分）。</p><p>​ 内存被划分到不同的slot之后可以获得如下好处:</p><ul><li>TaskManager最多能同时并发执行的任务是可以控制的，那就是3个，因为不能超过slot的数量</li><li>slot有独占的内存空间，这样在一个TaskManager中可以运行多个不同的作业，作业之间不受影响</li></ul></li><li><p>槽共享</p><p>​ 默认情况下，Flink允许子任务subtast（map[1] map[2] keyby[1] keyby[2] 共享插槽，即使它们是不同任务的子任务，只要它们来自同一个作业。结果是一个槽可以保存作业的整个管道。</p><p><img src="https://81.71.83.25/bucket/image-20200731004113146.png" alt="" loading="lazy"></p></li></ul>`,71),c=[e];function l(o,i){return a(),s("div",null,c)}const r=n(p,[["render",l],["__file","1_Flink概述及入门应用.html.vue"]]);export{r as default};
